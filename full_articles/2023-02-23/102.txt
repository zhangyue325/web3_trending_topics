**导语**

在前一篇中我们介绍了零知识证明核心工具的椭圆曲线和同态隐藏。本文我们将继续介绍零知识证明核心工具中的多项式规约过程。‍‍‍

**核心数学工具**

**多项式规约过程**

上一小节，我们通过同态隐藏，得到了一个非交互的多项式盲验证协议，算是解决了零知识证明中最核心的问题。接下来，我们在阿维·威格森的 NP 问题可零知识证明化理论和 NP 问题可相互规约理论[6]的指导下，再通过一些列数学工具，来解决普通程序转化为多项式的问题。

**1、计算电路**

我们以这样一段程序为例：

* 
* 
* 
* 
* 
* 
* 


```
function calc(w, a, b)  if w then  return a × b  else  return a + b  end if end function
```
首先我们把该程序翻译成函数表达式：

![](https://img.foresightnews.pro/202302/7e5a7950529650946a0cd6a62e2950f5.png?x-oss-process=style/scale70)

思考一下，**其实我们可以用这种方法表达任何形式的有限程序**。

执行 calc(1, 3, 2) 和对 f (1, 3, 2) 求值都可以得到 6。如果执行 calc(0, 3, 2) 和 f(0,3,2) 能够得到 5。

对于我们的证明系统，需要我们证明的是,对于表达式 f(w,a,b)，输入为 (1, 4, 2) 时输出为 8，换句话说，Alice 要证明她知道 (w,a,b) 的值，使得多项式：

w(a · b)+(1-w)(a+b) = v, w ∈ {0,1}

我们把该函数展开一下：

w(a · b-a-b) + a + b= v

这样我们就可以把所有的复杂计**算拍平**成计**算电路**：

![](https://img.foresightnews.pro/202302/37780b0e1c8a9b387d2a0f55fa50fca0.png?x-oss-process=style/scale70)

![](https://img.foresightnews.pro/202302/f04f589d9198df6283982aa0992a025a.png?x-oss-process=style/scale70)

**2、门电路求解**

接下来，我们要往多项式上靠了，具体思想是这样的：

为了证明单个计算的正确性，我们就必须首先确保所提供的操作数的输出（结果）的正确性。对于每一个门电路，类似得我们也可以将其表示为一个运算多项式

l(x) **operator** r(x) = o(x)

在一些选定的取值 a 处的运算:

•l(x) — 表示（运算结果为）左操作数

•r(x) — 表示（运算结果为）右操作数

•o(x) — 表示运算结果（输出）

因而在计算过程中如果操作数和结果都可以用多项式的形式正确地表示出来，那么 l(a) **operator** r(a) = o(a) 就能够成立。也就是说假如输出多项式 o(x) 所代表的值是由运算符在操作数多项式 l(x) 和 r(x) 上进行乘法运算得出的正确结果，那么我们把输出多项式 o(x) 放到等式的左边就能够得到：

l(a) **operator** r(a) – o(a) = 0

那么只要多项式是有效的，运算多项式就一定有一个根 a。因此，根据前面的基础这个多项式里面一定包含因式 (x-a) ，这就是我们要使用证明的目标多项式，即 t(x) = x – a。

例如，我们来看一个运算：3×2=6

可以用一个简单的多项式表示它：l(x) = 3x, r(x) = 2x, o(x) = 6x，取 a=1 进行计算，即 l(1) = 3；r(1) = 2；o(1) = 6。

然后我们可以得到 p(x) = l(x) × r(x) – o(x) 的图像：

l(x) × r(x) = o(x)

3x × 2x =6x

6x² -6x =0

p(x) = 6x² -6x  


![](https://img.foresightnews.pro/202302/20810f618e162b138313953319eb3d15.png?x-oss-process=style/scale70)

![](https://img.foresightnews.pro/202302/1a080d8e6bf1dd0aed3b09d63a602919.png?x-oss-process=style/scale70)

现在，我们已经把一个乘法门计算，转化成了对 p(x) 系数的求解。如果我们就这样一个一个门电路求解过去也是可以的，但是这样做显然效率不高。

所以，为了能够高效的对复杂的算数电路求解，和上面的曲线叠加思路一致，每一个门电路其实是互不干扰的一条曲线，如果我们把所有的门电路叠加到一起，形成一条新的曲线，这条曲线在每一个门电路求解处，仍然是互不干扰的。

这样，我们就可以构造出一条曲线，通过对这条曲线的多项式系数的求解，一次完成所有门电路的计算。为了构造这样一条曲线，我们引入了 R1CS。

**3、R1CS**

我们把每一个门电路表示为等价的向量点积形式，这个过程成为**R1CS（rank-1 constraint system）**。

对每个门电路，我们定义一组向量

![](https://img.foresightnews.pro/202302/0592ef9d2e11210eb084406e247c5862.png?x-oss-process=style/scale70)

和

![](https://img.foresightnews.pro/202302/f2885754668e8e4bcc7b90ac1f300703.png?x-oss-process=style/scale70)

一个解向量 ( 全部输入的向量 )，使得

![](https://img.foresightnews.pro/202302/042619790ea0360b29d62605dc39959b.png?x-oss-process=style/scale70)

每一个向量都包含了所有门电路的输入输出维度，

![](https://img.foresightnews.pro/202302/8ddeae26a36dd3855e8210948ef6cafc.png?x-oss-process=style/scale70)

为了让加法门也能用同样的方式表达，我们增加一个虚拟的变量 one，向量变成

![](https://img.foresightnews.pro/202302/24d567637e2c872410080c7763b9c1c9.png?x-oss-process=style/scale70)

对应到第一个门:

![](https://img.foresightnews.pro/202302/23c3043202b88c6d156d430ef72a0d93.png?x-oss-process=style/scale70)

![](https://img.foresightnews.pro/202302/3412c60077fcd7acd43a18bd58665004.png?x-oss-process=style/scale70)

（s 向量的解代表了我们知道所有满足门电路约束条件的输入、输出和中间过程，也就等价于我们知道 calc 函数的所有逻辑以及输入和对应的输出）

把 s，a，b 和 c 代入 s . a \* s . b - s . c = 0，得到 

![](https://img.foresightnews.pro/202302/c56c9d888fad83c238de13d9222090b1.png?x-oss-process=style/scale70)

其中⋅表示向量内积，∗表示算数乘法。即这个向量表达跟第一个门是完全等价的，那么此时能够使等式成立的 s 向量，就是这个门电路的解。

同理我们可以计算第二个门，第三个门......

我们最终要找的 s 向量，是可以满足所有 R1CS 的解。

好了，到这里，我们把一个计算式拍平成为门电路，接着又通过 R1CS 把门电路“编码”成向量的表达方式。

接下来是最重要的一步，把向量表达式表示为多项式，然后一次找到满足所有约束的 s 向量。这个过程称为 QAP（Quadratic Arithmetic Programs）。

**4、QAP**

QAP 的第一步，是把我们上以一节得到的

![](https://img.foresightnews.pro/202302/271cb881c1a9ea533bb9ac11f4a59a0f.png?x-oss-process=style/scale70)

向量组中的每一个维度都表示成一个多项式的结果：

![](https://img.foresightnews.pro/202302/0febbfb08d6f0f71f63755bcb0d7cea5.png?x-oss-process=style/scale70)

针对门 1/ 门 2/ 门 3/ 门 4/ 门 5/ 门 6，我们可以分别令 x=1，x=2，x=3，x=4，x=5，x=6。对于不同门相同向量维度取其 R1CS 的值。比如说：门 1 的

![](https://img.foresightnews.pro/202302/897dc4efed58ac550b523203b377fe5f.png?x-oss-process=style/scale70)

的第三个维度取值是 1，那么

![](https://img.foresightnews.pro/202302/3ef1cda22d13bf01b17b392b166a4436.png?x-oss-process=style/scale70)

门 2 的的第三个维度取值也是 1，那么么

![](https://img.foresightnews.pro/202302/7846d66c4cc0545979183e94e0e29510.png?x-oss-process=style/scale70)

门 3 的第三个维度取值是 0，那么

![](https://img.foresightnews.pro/202302/e21fda104857cdd267eb703db74ee856.png?x-oss-process=style/scale70)

依次类推，我们可以得到

![](https://img.foresightnews.pro/202302/eaf0541d1ba4ad17345ada7e0163b3da.png?x-oss-process=style/scale70)

这个函数在 x=1，x=2，x=3，x=4，x=5，x=6 处的 6 个点。

知道一条曲线上的多个点，如何确定这条曲线？这就要用到我们大学高数里的知识——拉格朗日插值法了。小伙伴可以通过这个工具 (https://zh.planetcalc.com/8692/) 来插值出一个多项式。

第二步，在我们获得了

![](https://img.foresightnews.pro/202302/8f4eb5f6a7d7904fff67474d1796bd67.png?x-oss-process=style/scale70)

的这些多项式后，代入

![](https://img.foresightnews.pro/202302/8d1b02f402a1e18f33c5c27ec67b2fed.jpeg?x-oss-process=style/scale70)

向量，得到多项式：

![](https://img.foresightnews.pro/202302/a0e93c9f6240e554fbb32f81d746e70b.png?x-oss-process=style/scale70)

而前述的过程表明，在 x=1，x=2，x=3，x=4，x=5，x=6 时，

![](https://img.foresightnews.pro/202302/61bf8f4e5bb57dc695e7d32c0c229c72.png?x-oss-process=style/scale70)

所以可以得出一个确定可整除的多项式

![](https://img.foresightnews.pro/202302/60c1d39f8b50e1b66e58f5c06d3ef1de.png?x-oss-process=style/scale70)

第三步，我们可以根据多项式除法，得到 h(x)。

至此，我们把一个分支条件的普通计算程序，转化成了一个多项式系数验证问题，接下来，我们就可以通过 3.2 节介绍的同态隐藏算法来构造通用零知识证明的非交互协议了。

纵观整个多项式规约过程，包含了两点数学思想：1、约束求解，2、超维，从中我们可以略微的窥探到数学家们脑子里的思维武器是怎么配合使用的。

与上篇文章一样， 本篇文章强度依然很大，能坚持学习到这里已经非常不错了。 本篇主要介绍了零知识证明核心数学工具的最后一个**—****—多项式规约过程**。下一篇文章我们开始介绍零知识证明协议**——匹诺曹协议和****Groth16**。‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍

[6] Hartmanis J. Computers and intractability: a guide to the theory of np-completeness (michael r. garey and david s. johnson)[J]. Siam Review, 1982, 24(1): 90.

![](https://img.foresightnews.pro/202302/03d33352113732ebd3dd4cc0855bdcf9.png?x-oss-process=style/scale70)

**Numen official website**https://numencyber.com/ **GitHub**https://github.com/NumenCyber**twitter**https://twitter.com/@numencyber**Medium**https://medium.com/@numencyberlabs**LinkedIn**https://www.linkedin.com/company/numencyber/